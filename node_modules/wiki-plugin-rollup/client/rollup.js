
/*
 * Federated Wiki : Rollup Plugin
 *
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-plugin-rollup/blob/master/LICENSE.txt
 */

(function() {
  window.plugins.rollup = {
    emit: function(div, item) {},
    bind: function(div, item) {
      var $row, $table, asValue, attach, delay, display, i, len, perform, radar, recalculate, reference, reindex, remaining, results, results1, row, rows, slug, state, timeout;
      div.dblclick(function() {
        return wiki.textEditor(div, item);
      });
      div.append("<style>\n  td.material {overflow:hidden;}\n  td.score {text-align:right; width:25px}\n</style>");
      asValue = function(obj) {
        if (obj == null) {
          return NaN;
        }
        switch (obj.constructor) {
          case Number:
            return obj;
          case String:
            return +obj;
          case Array:
            return asValue(obj[0]);
          case Object:
            return asValue(obj.value);
          case Function:
            return obj();
          default:
            return NaN;
        }
      };
      attach = function(search) {
        var elem, i, len, ref, source;
        wiki.log('attach', wiki.getDataNodes(div));
        ref = wiki.getDataNodes(div);
        for (i = 0, len = ref.length; i < len; i++) {
          elem = ref[i];
          wiki.log('attach loop', $(elem).data('item').text);
          if ((source = $(elem).data('item')).text.indexOf(search) >= 0) {
            return source;
          }
        }
        throw new Error("can't find dataset with caption " + search);
      };
      reference = attach("Materials Summary");
      display = function(calculated, state) {
        var $row, col, color, e, errors, i, label, len, now, old, ref, results1, row, title;
        row = state.row;
        $row = state.$row;
        ref = reference.columns;
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          col = ref[i];
          if (col === 'Material') {
            label = wiki.resolveLinks("[[" + row.Material + "]]");
            if (calculated) {
              if (state.errors.length > 0) {
                errors = ((function() {
                  var j, len1, ref1, results2;
                  ref1 = state.errors;
                  results2 = [];
                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    e = ref1[j];
                    results2.push(e.message.replace(/"/g, "'"));
                  }
                  return results2;
                })()).join("\n");
                results1.push($row.append("<td class=\"material\">" + label + " <span style=\"color:red;\" title=\"" + errors + "\">âœ˜</span></td>"));
              } else {
                results1.push($row.append("<td class=\"material\">" + label + "</td>"));
              }
            } else {
              results1.push($row.append("<td class=\"material\">" + label + "</td>"));
            }
          } else {
            old = asValue(row[col]);
            now = asValue(state.input[col]);
            if (calculated && (now != null)) {
              color = old.toFixed(4) === now.toFixed(4) ? 'green' : old.toFixed(0) === now.toFixed(0) ? 'orange' : 'red';
              title = row.Material + "\n" + col + "\nold " + (old.toFixed(4)) + "\nnow " + (now.toFixed(4));
              results1.push($row.append("<td class=\"score\" title=\"" + title + "\" data-thumb=\"" + col + "\" style=\"color:" + color + ";\">" + (old.toFixed(0)) + "</td>"));
            } else {
              title = row.Material + "\n" + col + "\n" + (old.toFixed(4));
              results1.push($row.append("<td class=\"score\" title=\"" + title + "\" data-thumb=\"" + col + "\">" + (old.toFixed(0)) + "</td>"));
            }
          }
        }
        return results1;
      };
      perform = function(state, plugin, done) {
        if (state.methods.length > 0) {
          return plugin["eval"](state, state.methods.shift(), state.input, function(state, output) {
            state.output = output;
            _.extend(state.input, output);
            return perform(state, plugin, done);
          });
        } else {
          return done(state);
        }
      };
      timeout = function(delay, done) {
        return setTimeout(done, delay);
      };
      recalculate = function(delay, state, done) {
        return timeout(delay, function() {
          return wiki.getPlugin('method', function(plugin) {
            return $.getJSON("/" + state.slug + ".json", function(data) {
              state.methods = _.filter(data.story, function(item) {
                return item.type === 'method';
              });
              return perform(state, plugin, done);
            });
          });
        });
      };
      radar = function(input) {
        var candidates, elem, i, len, output;
        if (input == null) {
          input = {};
        }
        candidates = $(".item:lt(" + ($('.item').index(div)) + ")");
        output = _.extend({}, input);
        for (i = 0, len = candidates.length; i < len; i++) {
          elem = candidates[i];
          elem = $(elem);
          if (elem.hasClass('radar-source')) {
            _.extend(output, elem.get(0).radarData());
          } else if (elem.hasClass('data')) {
            _.extend(output, elem.data('item').data[0]);
          }
        }
        return output;
      };
      reindex = function(results) {
        var i, index, j, len, len1, results1, sorted, state;
        wiki.log('reindex', results);
        sorted = _.sortBy(results, function(state) {
          return -asValue(state.input['Total Score']);
        });
        for (index = i = 0, len = sorted.length; i < len; index = ++i) {
          state = sorted[index];
          state.input.Rank = "" + (index + 1);
        }
        results1 = [];
        for (j = 0, len1 = results.length; j < len1; j++) {
          state = results[j];
          state.$row.empty();
          results1.push(display(true, state));
        }
        return results1;
      };
      div.append(($table = $("<table/>")));
      rows = _.sortBy(reference.data, function(row) {
        return -asValue(row['Total Score']);
      });
      delay = 0;
      results = [];
      remaining = rows.length;
      results1 = [];
      for (i = 0, len = rows.length; i < len; i++) {
        row = rows[i];
        slug = wiki.asSlug(row.Material);
        $table.append(($row = $("<tr class=\"" + slug + "\">")));
        state = {
          $row: $row,
          row: row,
          slug: slug,
          input: radar(),
          errors: []
        };
        display(false, state);
        delay += 200;
        results1.push(recalculate(delay, state, function(state) {
          state.$row.empty();
          state.input.Rank = state.row.Rank;
          display(true, state);
          results.push(state);
          remaining -= 1;
          if (!remaining) {
            return reindex(results);
          }
        }));
      }
      return results1;
    }
  };

}).call(this);

//# sourceMappingURL=rollup.js.map
