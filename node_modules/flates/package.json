{
  "_args": [
    [
      "flates@0.0.5",
      "/home/simplon/node_modules/wiki-server"
    ]
  ],
  "_from": "flates@0.0.5",
  "_id": "flates@0.0.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/flates",
  "_npmUser": {
    "email": "nick.niemeir@gmail.com",
    "name": "nrn"
  },
  "_npmVersion": "1.1.61",
  "_phantomChildren": {},
  "_requested": {
    "name": "flates",
    "raw": "flates@0.0.5",
    "rawSpec": "0.0.5",
    "scope": null,
    "spec": "0.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "/wiki-server"
  ],
  "_resolved": "https://registry.npmjs.org/flates/-/flates-0.0.5.tgz",
  "_shasum": "f2830d2a6d4141fdd16ca2c53d7b007c712f0ce1",
  "_shrinkwrap": null,
  "_spec": "flates@0.0.5",
  "_where": "/home/simplon/node_modules/wiki-server",
  "author": {
    "email": "nick.niemeir@gmail.com",
    "name": "Nick Niemeir",
    "url": "http://nrn.io"
  },
  "bugs": {
    "url": "https://github.com/nrn/flates/issues"
  },
  "dependencies": {},
  "description": "Simple functions to build html strings.",
  "devDependencies": {
    "tape": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "f2830d2a6d4141fdd16ca2c53d7b007c712f0ce1",
    "tarball": "https://registry.npmjs.org/flates/-/flates-0.0.5.tgz"
  },
  "engines": {
    "node": ">0.6"
  },
  "homepage": "https://github.com/nrn/flates#readme",
  "keywords": [
    "HTML",
    "functional",
    "template",
    "templates"
  ],
  "main": "flates.js",
  "maintainers": [
    {
      "name": "nrn",
      "email": "nick.niemeir@gmail.com"
    }
  ],
  "name": "flates",
  "optionalDependencies": {},
  "readme": "# Flates\n\nFlates is simple functional templating in javascript.\n\n[![browser support](http://ci.testling.com/nrn/flates.png)](http://ci.testling.com/nrn/flates)\n\n## f(tag[, attributes, innerHTML...]) || f.tag([attributes, innerhtml])\n\nEach function takes an optional attribute object which is just the\n{ key: 'value' } representation of key=\"value\" pairs you want\nas attributes, and the contents of the element, and returns a\nstring of html.  This can be used server side to build the whole, or parts\nof the html to respond to a request with, or client side to append or\nset the inner html of a DOM element to.\n\n\n```javascript\nvar f = Flates()\nf.div({ id: 'foo' }, f.p('This Works? ' + f.strong('Weeeeeeeeeeee')))\n// <div id=\"foo\"><p>This Works? <strong>Weeeeeeeeeeee</strong></p></div>\n```\n\nOr you can do more complicated stuff, like recursively building html from an\nobject.\n\n```javascript\n\nfunction build (obj) {\n  if (!obj) return obj\n  else if (Array.isArray(obj)) return f.ul(obj.map(build).map(f.li))\n  else if (typeof obj === 'object') {\n    return f.dl(Object.keys(obj).map( function(key) {\n      return f.dt(key) + f.dd(build(obj[key]))\n    }))\n  } else return obj\n}\n\n```\n\nYou'll notice arrays are turned into strings internally using .join(''),\nstringify them beforehand if you want them joined another way.\n\nInspired by Christian Johansen - Pure, functional JavaScript.\nhttp://vimeo.com/43382919\n\n\nLicense: MIT\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/nrn/flates.git"
  },
  "scripts": {
    "test": "for f in ./t/*.js; do node $f; done"
  },
  "testling": {
    "browsers": {
      "chrome": [
        "23",
        "canary"
      ],
      "firefox": [
        "17",
        "nightly"
      ],
      "ie": [
        "10"
      ],
      "opera": [
        "12",
        "next"
      ],
      "safari": [
        "5.1"
      ]
    },
    "files": [
      "t/*.js"
    ]
  },
  "version": "0.0.5"
}
