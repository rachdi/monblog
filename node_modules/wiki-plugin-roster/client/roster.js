
/*
 * Federated Wiki : Roster Plugin
 *
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-plugin-roster/blob/master/LICENSE.txt
 */

(function() {
  var bind, emit, escape, includes, load_sites, parse;

  includes = {};

  escape = function(text) {
    return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  load_sites = function(uri) {
    var results, site, tuples;
    tuples = uri.split(' ');
    results = [];
    while (tuples.length) {
      site = tuples.shift();
      results.push(wiki.neighborhoodObject.registerNeighbor(site));
    }
    return results;
  };

  parse = function($item, item) {
    var cat, category, expand, flag, includeReferences, includeRoster, lines, lineup, marks, more, newline, roster;
    roster = {
      all: []
    };
    category = null;
    lineup = [];
    marks = {};
    lines = [];
    if ($item != null) {
      $item.addClass('roster-source');
      $item.get(0).getRoster = function() {
        return roster;
      };
    }
    more = item.text.split(/\r?\n/);
    flag = function(site) {
      var br;
      roster.all.push(site);
      lineup.push(site);
      br = lineup.length >= 18 ? newline() : '';
      return "<img class=\"remote\" src=\"//" + site + "/favicon.png\" title=\"" + site + "\" data-site=\"" + site + "\" data-slug=\"welcome-visitors\">" + br;
    };
    newline = function() {
      var j, len, ref, site, sites;
      if (lineup.length) {
        ref = [lineup, []], sites = ref[0], lineup = ref[1];
        if (category != null) {
          roster[category] || (roster[category] = []);
          for (j = 0, len = sites.length; j < len; j++) {
            site = sites[j];
            roster[category].push(site);
          }
        }
        return " <a class='loadsites' href= \"/#\" data-sites=\"" + (sites.join(' ')) + "\" title=\"add these " + sites.length + " sites\nto neighborhood\">Â»</a><br> ";
      } else {
        return "<br>";
      }
    };
    cat = function(name) {
      return category = name;
    };
    includeRoster = function(line, siteslug) {
      if (marks[siteslug] != null) {
        return "<span>trouble looping " + siteslug + "</span>";
      } else {
        marks[siteslug] = true;
      }
      if (includes[siteslug] != null) {
        [].unshift.apply(more, includes[siteslug]);
        return '';
      } else {
        $.getJSON("http://" + siteslug + ".json", function(page) {
          var i, j, len, ref;
          includes[siteslug] = ["<span>trouble loading " + siteslug + "</span>"];
          ref = page.story;
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            if (i.type === 'roster') {
              includes[siteslug] = i.text.split(/\r?\n/);
              break;
            }
          }
          $item.empty();
          emit($item, item);
          return bind($item, item);
        });
        return "<span>loading " + siteslug + "</span>";
      }
    };
    includeReferences = function(line, siteslug) {
      if (includes[siteslug] != null) {
        [].unshift.apply(more, includes[siteslug]);
        return '';
      } else {
        $.getJSON("http://" + siteslug + ".json", function(page) {
          var i, j, len, ref;
          includes[siteslug] = [];
          ref = page.story;
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            if (i.type === 'reference') {
              if (includes[siteslug].indexOf(i.site) < 0) {
                includes[siteslug].push(i.site);
              }
            }
          }
          $item.empty();
          emit($item, item);
          return bind($item, item);
        });
        return "<span>loading " + siteslug + "</span>";
      }
    };
    expand = function(text) {
      return text.replace(/^$/, newline).replace(/^([a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+)(:\d+)?$/, flag).replace(/^localhost(:\d+)?$/, flag).replace(/^ROSTER ([A-Za-z0-9.-:]+\/[a-z0-9-]+)$/, includeRoster).replace(/^REFERENCES ([A-Za-z0-9.-:]+\/[a-z0-9-]+)$/, includeReferences).replace(/^([^<].*)$/, cat);
    };
    while (more.length) {
      lines.push(expand(more.shift()));
    }
    lines.push(newline());
    return lines.join(' ');
  };

  emit = function($item, item) {
    return $item.append("<p style=\"background-color:#eee;padding:15px;\">\n  " + (parse($item, item)) + "\n</p>");
  };

  bind = function($item, item) {
    $item.dblclick(function(e) {
      if (e.shiftKey) {
        return wiki.dialog("Roster Categories", "<pre>" + (JSON.stringify($item.get(0).getRoster(), null, 2)) + "</pre>");
      } else {
        return wiki.textEditor($item, item);
      }
    });
    return $item.find('.loadsites').click(function(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('roster sites', $(e.target).data('sites').split(' '));
      return load_sites($(e.target).data('sites'));
    });
  };

  if (typeof window !== "undefined" && window !== null) {
    window.plugins.roster = {
      emit: emit,
      bind: bind
    };
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = {
      parse: parse,
      includes: includes
    };
  }

}).call(this);

//# sourceMappingURL=roster.js.map
