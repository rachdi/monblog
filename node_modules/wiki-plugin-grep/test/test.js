(function() {
  var expect, grep;

  grep = require('../client/grep');

  expect = require('expect.js');

  describe('grep plugin', function() {
    var page;
    describe('parse', function() {
      it('accepts empty', function() {
        var errors, listing, program, ref;
        ref = grep.parse(''), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(errors).to.eql(0);
      });
      it('accepts whitespace', function() {
        var errors, listing, program, ref;
        ref = grep.parse('   \n   '), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(errors).to.eql(0);
      });
      it('ignores empty lines', function() {
        var errors, listing, program, ref;
        ref = grep.parse('   \n    \n'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(program).to.eql([]);
      });
      it('accepts item types', function() {
        var errors, listing, program, ref;
        ref = grep.parse('ITEM paragraph'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(program).to.eql([
          {
            'op': 'ITEM',
            'type': 'paragraph'
          }
        ]);
      });
      it('accepts action types', function() {
        var errors, listing, program, ref;
        ref = grep.parse('ACTION fork'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(program).to.eql([
          {
            'op': 'ACTION',
            'type': 'fork'
          }
        ]);
      });
      it('accepts text patterns', function() {
        var errors, listing, program, ref;
        ref = grep.parse('TEXT foo'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(program).to.eql([
          {
            'op': 'TEXT',
            'regex': {}
          }
        ]);
      });
      return it('accepts item with unspecified type', function() {
        var errors, listing, program, ref;
        ref = grep.parse('ITEM'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(program).to.eql([
          {
            'op': 'ITEM',
            'type': ''
          }
        ]);
      });
    });
    describe('parse fails on', function() {
      it('unknown operation', function() {
        var errors, listing, program, ref;
        ref = grep.parse('MUMBLE'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(errors).to.eql(1);
      });
      it('unreasonable type', function() {
        var errors, listing, program, ref;
        ref = grep.parse('ITEM void*'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(errors).to.eql(1);
      });
      return it('irregular expression', function() {
        var errors, listing, program, ref;
        ref = grep.parse('TEXT a)b'), program = ref[0], listing = ref[1], errors = ref[2];
        return expect(errors).to.eql(1);
      });
    });
    page = {
      'title': 'Federated Wiki',
      'story': [
        {
          'type': 'paragraph',
          'text': 'It keeps getting better.'
        }, {
          "type": 'video',
          'text': 'YOUTUBE 2R3LM_A7Cg4\nWard introduces the parts.'
        }
      ],
      'journal': [
        {
          'type': 'create'
        }, {
          'type': 'fork',
          'site': 'fed.wiki.org'
        }
      ]
    };
    return describe('sample eval', function() {
      it('should find a video', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'ITEM',
            'type': 'video'
          }
        ], 0)).to.be(true);
      });
      it('should not find a method', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'ITEM',
            'type': 'method'
          }
        ], 0)).to.be(false);
      });
      it('should find a fork', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'ACTION',
            'type': 'fork'
          }
        ], 0)).to.be(true);
      });
      it('should not find a delete', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'ACTION',
            'type': 'delete'
          }
        ], 0)).to.be(false);
      });
      it('should find ward in text', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'ITEM',
            'type': ''
          }, {
            'op': 'TEXT',
            'regex': /ward/im
          }
        ], 0)).to.be(true);
      });
      return it('should find federated in title', function() {
        return expect(grep.evalPage(page, [
          {
            'op': 'TITLE',
            'regex': /federated/im
          }
        ], 0)).to.be(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=test.js.map
