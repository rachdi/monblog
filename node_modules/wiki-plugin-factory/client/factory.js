
/*
 * Federated Wiki : Factory Plugin
 *
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-plugin-factory/blob/master/LICENSE.txt
 */

(function() {
  var arrayToJson, csvToArray,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.plugins.factory = {
    emit: function(div, item) {
      var showMenu, showPrompt;
      div.append('<p>Double-Click to Edit<br>Drop Text or Image to Insert</p>');
      showMenu = function() {
        var i, info, len, menu, menuItem, name, ref, ref1;
        menu = div.find('p').append("<br>Or Choose a Plugin");
        menuItem = function(title, name) {
          return menu.append("<li><a class=\"menu\" href=\"#\" title=\"" + title + "\">" + name + "</a></li>");
        };
        if (Array.isArray(window.catalog)) {
          ref = window.catalog;
          for (i = 0, len = ref.length; i < len; i++) {
            info = ref[i];
            menuItem(info.title, info.name);
          }
        } else {
          ref1 = window.catalog;
          for (name in ref1) {
            info = ref1[name];
            menuItem(info.menu, name);
          }
        }
        return menu.find('a.menu').click(function(evt) {
          div.removeClass('factory').addClass(item.type = evt.target.text.toLowerCase());
          div.unbind();
          return wiki.textEditor(div, item);
        });
      };
      showPrompt = function() {
        return div.append("<p>" + (wiki.resolveLinks(item.prompt)) + "</b>");
      };
      if (item.prompt) {
        return showPrompt();
      } else if (window.catalog != null) {
        return showMenu();
      } else {
        return $.getJSON('/system/factories.json', function(data) {
          window.catalog = data;
          return showMenu();
        });
      }
    },
    bind: function(div, item) {
      var syncEditAction;
      syncEditAction = function() {
        var err, pageElement;
        wiki.log('factory item', item);
        div.empty().unbind();
        div.removeClass("factory").addClass(item.type);
        pageElement = div.parents('.page:first');
        try {
          div.data('pageElement', pageElement);
          div.data('item', item);
          wiki.getPlugin(item.type, function(plugin) {
            plugin.emit(div, item);
            return plugin.bind(div, item);
          });
        } catch (_error) {
          err = _error;
          div.append("<p class='error'>" + err + "</p>");
        }
        return wiki.pageHandler.put(pageElement, {
          type: 'edit',
          id: item.id,
          item: item
        });
      };
      div.dblclick(function() {
        div.removeClass('factory').addClass(item.type = 'paragraph');
        div.unbind();
        return wiki.textEditor(div, item);
      });
      div.bind('dragenter', function(evt) {
        return evt.preventDefault();
      });
      div.bind('dragover', function(evt) {
        return evt.preventDefault();
      });
      return div.bind("drop", function(dropEvent) {
        var dt, found, ignore, origin, punt, readFile, url;
        punt = function(data) {
          item.prompt = "<b>Unexpected Item</b><br>We can't make sense of the drop.<br>" + (JSON.stringify(data)) + "<br>Try something else or see [[About Factory Plugin]].";
          data.userAgent = navigator.userAgent;
          item.punt = data;
          wiki.log('factory punt', dropEvent);
          return syncEditAction();
        };
        readFile = function(file) {
          var majorType, minorType, reader, ref;
          if (file != null) {
            ref = file.type.split("/"), majorType = ref[0], minorType = ref[1];
            if (file.name.toLowerCase().match(/\.csv$/)) {
              majorType = 'text';
              minorType = 'csv';
            }
            reader = new FileReader();
            if (majorType === "image") {
              reader.onload = function(loadEvent) {
                item.type = 'image';
                item.url = loadEvent.target.result;
                item.caption || (item.caption = "Uploaded image");
                return syncEditAction();
              };
              return reader.readAsDataURL(file);
            } else if (majorType === "text") {
              reader.onload = function(loadEvent) {
                var array, result;
                result = loadEvent.target.result;
                if (minorType === 'csv') {
                  item.type = 'data';
                  item.columns = (array = csvToArray(result))[0];
                  item.data = arrayToJson(array);
                  item.text = file.fileName;
                } else {
                  item.type = 'paragraph';
                  item.text = result;
                }
                return syncEditAction();
              };
              return reader.readAsText(file);
            } else {
              return punt({
                number: 1,
                name: file.fileName,
                type: file.type
              });
            }
          } else {
            return punt({
              number: 2,
              types: dropEvent.originalEvent.dataTransfer.types
            });
          }
        };
        dropEvent.preventDefault();
        if ((dt = dropEvent.originalEvent.dataTransfer) != null) {
          if ((dt.types != null) && (indexOf.call(dt.types, 'text/uri-list') >= 0 || indexOf.call(dt.types, 'text/x-moz-url') >= 0) && !(indexOf.call(dt.types, 'Files') >= 0)) {
            url = dt.getData('URL');
            if (found = url.match(/^http:\/\/([a-zA-Z0-9:.-]+)(\/([a-zA-Z0-9:.-]+)\/([a-z0-9-]+(_rev\d+)?))+$/)) {
              wiki.log('factory drop url', found);
              ignore = found[0], origin = found[1], ignore = found[2], item.site = found[3], item.slug = found[4], ignore = found[5];
              if ($.inArray(item.site, ['view', 'local', 'origin']) >= 0) {
                item.site = origin;
              }
              return $.getJSON("http://" + item.site + "/" + item.slug + ".json", function(remote) {
                wiki.log('factory remote', remote);
                item.type = 'reference';
                item.title = remote.title || item.slug;
                item.text = wiki.createSynopsis(remote);
                syncEditAction();
                if (item.site != null) {
                  return wiki.registerNeighbor(item.site);
                }
              });
            } else {
              return punt({
                number: 4,
                url: url,
                types: dt.types
              });
            }
          } else if (indexOf.call(dt.types, 'Files') >= 0) {
            return readFile(dt.files[0]);
          } else {
            return punt({
              number: 5,
              types: dt.types
            });
          }
        } else {
          return punt({
            number: 6,
            trouble: "no data transfer object"
          });
        }
      });
    }
  };

  csvToArray = function(strData, strDelimiter) {
    var arrData, arrMatches, objPattern, strMatchedDelimiter, strMatchedValue;
    strDelimiter = strDelimiter || ",";
    objPattern = new RegExp("(\\" + strDelimiter + "|\\r?\\n|\\r|^)" + "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + "([^\"\\" + strDelimiter + "\\r\\n]*))", "gi");
    arrData = [[]];
    arrMatches = null;
    while (arrMatches = objPattern.exec(strData)) {
      strMatchedDelimiter = arrMatches[1];
      if (strMatchedDelimiter.length && (strMatchedDelimiter !== strDelimiter)) {
        arrData.push([]);
      }
      if (arrMatches[2]) {
        strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
      } else {
        strMatchedValue = arrMatches[3];
      }
      arrData[arrData.length - 1].push(strMatchedValue);
    }
    return arrData;
  };

  arrayToJson = function(array) {
    var cols, i, len, results, row, rowToObject;
    cols = array.shift();
    rowToObject = function(row) {
      var i, k, len, obj, ref, ref1, v;
      obj = {};
      ref = _.zip(cols, row);
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], k = ref1[0], v = ref1[1];
        if ((v != null) && (v.match(/\S/)) && v !== 'NULL') {
          obj[k] = v;
        }
      }
      return obj;
    };
    results = [];
    for (i = 0, len = array.length; i < len; i++) {
      row = array[i];
      results.push(rowToObject(row));
    }
    return results;
  };

}).call(this);

//# sourceMappingURL=factory.js.map
