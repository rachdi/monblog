(function() {
  var expect, markdown;

  markdown = require('../client/markdown');

  expect = require('expect.js');

  describe('markdown plugin', function() {
    describe('headers', function() {
      it('can turn ### into h3', function() {
        var result;
        result = markdown.expand('###heading');
        return expect(result).to.be('<h3>heading</h3>');
      });
      it('will ignore ### most places', function() {
        var result;
        result = markdown.expand('  ###heading');
        return expect(result).to.be('  ###heading');
      });
      it('will turn # into h3 too', function() {
        var result;
        result = markdown.expand('#heading');
        return expect(result).to.be('<h3>heading</h3>');
      });
      return it('can do ### on many lines', function() {
        var result;
        result = markdown.expand('###one\n###two');
        return expect(result).to.be('<h3>one</h3><h3>two</h3>');
      });
    });
    describe('emphasis', function() {
      it('can turn * ... * into italic', function() {
        var result;
        result = markdown.expand('hello *world*');
        return expect(result).to.be('hello <i>world</i>');
      });
      it('can turn _ ... _ into italic', function() {
        var result;
        result = markdown.expand('hello _world_');
        return expect(result).to.be('hello <i>world</i>');
      });
      it('can convert multipe italic per line', function() {
        var result;
        result = markdown.expand('_hello_ _world_');
        return expect(result).to.be('<i>hello</i> <i>world</i>');
      });
      it('can convert multiple words per italic', function() {
        var result;
        result = markdown.expand('_hello world_');
        return expect(result).to.be('<i>hello world</i>');
      });
      it('must start with non-blank', function() {
        var result;
        result = markdown.expand('hello_ world_');
        return expect(result).to.be('hello_ world_');
      });
      it('must end with non-blank', function() {
        var result;
        result = markdown.expand('_hello _world');
        return expect(result).to.be('_hello _world');
      });
      it('can convert a single non-blank', function() {
        var result;
        result = markdown.expand('_x_');
        return expect(result).to.be('<i>x</i>');
      });
      it('can turn ** ... ** into bold', function() {
        var result;
        result = markdown.expand('hello **world**');
        return expect(result).to.be('hello <b>world</b>');
      });
      it('can turn __ ... __ into bold', function() {
        var result;
        result = markdown.expand('hello __world__');
        return expect(result).to.be('hello <b>world</b>');
      });
      it('can convert multipe bold per line', function() {
        var result;
        result = markdown.expand('__hello__ __world__');
        return expect(result).to.be('<b>hello</b> <b>world</b>');
      });
      return it('can convert multiple words per bold', function() {
        var result;
        result = markdown.expand('__hello world__');
        return expect(result).to.be('<b>hello world</b>');
      });
    });
    describe('unordered lists', function() {
      it('can turn * lines into lists', function() {
        var result;
        result = markdown.expand('* hello world');
        return expect(result).to.be('<li>hello world</li>');
      });
      it('can tell * lines from italic', function() {
        var result;
        result = markdown.expand('* hello *world*');
        return expect(result).to.be('<li>hello <i>world</i></li>');
      });
      it('can skip space before * lines', function() {
        var result;
        result = markdown.expand('  * hello world');
        return expect(result).to.be('<li>hello world</li>');
      });
      it('can turn - lines into lists', function() {
        var result;
        result = markdown.expand('- hello world');
        return expect(result).to.be('<li>hello world</li>');
      });
      it('must have at least one space after list marker', function() {
        var result;
        result = markdown.expand('-hello world');
        return expect(result).to.be('-hello world');
      });
      it('can have more than one space after list marker', function() {
        var result;
        result = markdown.expand('-     hello world');
        return expect(result).to.be('<li>hello world</li>');
      });
      it('can turn lines into incomplete tasks', function() {
        var result;
        result = markdown.expand('- [ ] hello world');
        return expect(result).to.be('<li><input type=checkbox data-line=0> hello world</li>');
      });
      it('can turn lines into complete tasks', function() {
        var result;
        result = markdown.expand('- [x] hello world');
        return expect(result).to.be('<li><input type=checkbox data-line=0 checked> hello world</li>');
      });
      it('must have at least one space after list marker and before incomplete tasks', function() {
        var result;
        result = markdown.expand('-[ ] hello world');
        return expect(result).to.be('-[ ] hello world');
      });
      return it('must have at least one space after list marker and before complete tasks', function() {
        var result;
        result = markdown.expand('-[x] hello world');
        return expect(result).to.be('-[x] hello world');
      });
    });
    describe('code blocks', function() {
      it('can turn ` ... ` into code block', function() {
        var result;
        result = markdown.expand('hello `world`');
        return expect(result).to.be('hello <code>world</code>');
      });
      it('can convert multipe code blocks per line', function() {
        var result;
        result = markdown.expand('`hello` `world`');
        return expect(result).to.be('<code>hello</code> <code>world</code>');
      });
      return it('ignores last back tick on odd number of back ticks', function() {
        var result;
        result = markdown.expand('`hello` `world');
        return expect(result).to.be('<code>hello</code> `world');
      });
    });
    return describe('breaks', function() {
      it('adds a break element at the end of a line', function() {
        var result;
        result = markdown.expand('hello\nworld');
        return expect(result).to.be('hello<br>world');
      });
      it('adds a break element at the end of lines ending with inline elements', function() {
        var result;
        result = markdown.expand('__Lorem__\n*ipsum*\ndolor\n`code`\nlast element');
        return expect(result).to.be('<b>Lorem</b><br><i>ipsum</i><br>dolor<br><code>code</code><br>last element');
      });
      return it("doesn't add a break element after block elements", function() {
        var result;
        result = markdown.expand('- [x] hello world\n###lorem ipsum');
        return expect(result).to.be('<li><input type=checkbox data-line=0 checked> hello world</li><h3>lorem ipsum</h3>');
      });
    });
  });

}).call(this);

//# sourceMappingURL=test.js.map
