
/*
 * Federated Wiki : Markdown Plugin
 *
 * Licensed under the MIT license.
 * https://github.com/fedwiki/wiki-plugin-markdown/blob/master/LICENSE.txt
 */

(function() {
  var bind, breakLine, code, emit, emphasis, escape, expand, headers, lineNumber, lists, toggle, totalLines;

  lineNumber = 0;

  totalLines = 0;

  headers = function(line) {
    return line = line.replace(/^#+(.*)$/, '<h3>$1</h3>');
  };

  emphasis = function(line) {
    line = line.replace(/\*\*(\S.*?\S)\*\*/g, '<b>$1</b>');
    line = line.replace(/\_\_(\S.*?\S)\_\_/g, '<b>$1</b>');
    line = line.replace(/\*(\S.*?\S)\*/g, '<i>$1</i>');
    line = line.replace(/\_(\S.*?\S)\_/g, '<i>$1</i>');
    line = line.replace(/\*\*(\S)\*\*/g, '<b>$1</b>');
    line = line.replace(/\_\_(\S)\_\_/g, '<b>$1</b>');
    line = line.replace(/\*(\S)\*/g, '<i>$1</i>');
    return line = line.replace(/\_(\S)\_/g, '<i>$1</i>');
  };

  lists = function(line) {
    line = line.replace(/^ *[*-] +(\[[ x]\])(.*)$/, function(line, box, content) {
      var checked;
      checked = box === '[x]' ? ' checked' : '';
      return "<li><input type=checkbox data-line=" + lineNumber + checked + ">" + content + "</li>";
    });
    return line = line.replace(/^ *[*-] +(.*)$/, '<li>$1</li>');
  };

  escape = function(line) {
    return line.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  code = function(line) {
    return line.replace(/`(\S.*?\S)`/g, "<code>$1</code>");
  };

  breakLine = function(line) {
    var exp;
    exp = /([^>]+|<\/(i|b|code)>)$/;
    if (lineNumber !== totalLines - 1 && exp.test(line)) {
      return line + "<br>";
    } else {
      return line;
    }
  };

  expand = function(text) {
    var line, lines, output;
    lines = text.split(/\n/);
    totalLines = lines.length;
    lineNumber = -1;
    output = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        lineNumber++;
        results.push(breakLine(emphasis(headers(lists(code(escape(line)))))));
      }
      return results;
    })();
    return output.join("");
  };

  emit = function($item, item) {
    return $item.append("<p>\n  " + (wiki.resolveLinks(item.text, expand)) + "\n</p>");
  };

  toggle = function(item, lineNumber) {
    var lines;
    lines = item.text.split(/\n/);
    lines[lineNumber] = lines[lineNumber].replace(/\[[ x]\]/, function(box) {
      if (box === '[x]') {
        return '[ ]';
      } else {
        return '[x]';
      }
    });
    return item.text = lines.join("\n");
  };

  bind = function($item, item) {
    $item.dblclick(function() {
      return wiki.textEditor($item, item);
    });
    return $item.find('[type=checkbox]').change(function(e) {
      toggle(item, $(e.target).data('line'));
      $item.empty();
      emit($item, item);
      bind($item, item);
      return wiki.pageHandler.put($item.parents('.page:first'), {
        type: 'edit',
        id: item.id,
        item: item
      });
    });
  };

  if (typeof window !== "undefined" && window !== null) {
    window.plugins.markdown = {
      emit: emit,
      bind: bind
    };
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = {
      expand: expand
    };
  }

}).call(this);

//# sourceMappingURL=markdown.js.map
